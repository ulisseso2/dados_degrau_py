# _pages/octadesk.py - Vers칚o Final, Completa e Corrigida

import streamlit as st
import pandas as pd
import requests
from dotenv import load_dotenv
import os
from datetime import datetime

# Carrega as vari치veis do .env (s칩 ter치 efeito no ambiente local)
load_dotenv()

# Define o fuso hor치rio padr칚o para a p치gina
TIMEZONE = 'America/Sao_Paulo'

# ==============================================================================
# 1. FUN칂칏ES AUXILIARES
# ==============================================================================

def get_octadesk_token():
    """Carrega o token da API do Octadesk de forma h칤brida e segura."""
    try:
        token = st.secrets["octadesk_api"]["token"]
    except (st.errors.StreamlitAPIException, KeyError):
        token = os.getenv("OCTADESK_API_TOKEN")
    
    if not token:
        st.error("Token da API do Octadesk n칚o encontrado. Verifique seus Secrets ou o arquivo .env.")
    return token

@st.cache_data(ttl=1800) # Adiciona cache de 30 minutos para performance
def get_octadesk_chats(api_token, start_date, end_date):
    """
    Busca os chats do Octadesk para um per칤odo, usando o m칠todo GET correto
    e tratando o fuso hor치rio.
    """
    # Converte as datas locais para Timestamps conscientes do fuso hor치rio
    start_ts = pd.Timestamp(start_date, tz=TIMEZONE)
    end_ts = pd.Timestamp(end_date, tz=TIMEZONE)

    url = "https://api.octadesk.com/chats/filter"
    headers = {"X-Api-Token": api_token}
    
    # Formata as datas para o padr칚o UTC (com 'Z') esperado pela API
    params = {
        "page": 1,
        "limit": 500, # Um limite razo치vel para a quantidade de chats
        "date[start]": start_ts.strftime('%Y-%m-%dT00:00:00.000Z'),
        "date[end]": end_ts.strftime('%Y-%m-%dT23:59:59.999Z')
    }
    
    try:
        response = requests.get(url, params=params, headers=headers)
        response.raise_for_status() # Gera um erro para respostas 4xx ou 5xx
        data = response.json()
        
        if data and data.get('results'):
            # Usa json_normalize para achatar o JSON e criar colunas como 'requester.name'
            return pd.json_normalize(data['results'])
        else:
            return pd.DataFrame()

    except requests.exceptions.HTTPError as http_err:
        st.error(f"Erro na API do Octadesk: {http_err.response.status_code} - {http_err.response.text}")
    except Exception as e:
        st.error(f"Ocorreu um erro ao buscar dados do Octadesk: {e}")
        
    return pd.DataFrame()

# ==============================================================================
# 2. FUN칂츾O PRINCIPAL DA P츼GINA (run_page)
# ==============================================================================

def run_page():
    st.title("游눫 An치lise de Atendimento (Octadesk)")

    api_token = get_octadesk_token()

    if not api_token:
        st.stop() # Interrompe a execu칞칚o se n칚o houver token

    # --- FILTRO DE DATA NA BARRA LATERAL ---
    st.sidebar.header("Filtro de Per칤odo (Octadesk)")
    hoje = datetime.now(tz=pd.Timestamp(0, tz=TIMEZONE).tz).date() # Pega o "hoje" consciente do fuso hor치rio
    data_inicio_padrao = hoje - pd.Timedelta(days=6)
    
    periodo_selecionado = st.sidebar.date_input(
        "Selecione o Per칤odo de An치lise:",
        [data_inicio_padrao, hoje],
        key="octadesk_date_range"
    )

    if len(periodo_selecionado) != 2:
        st.warning("Por favor, selecione um per칤odo de datas v치lido.")
        st.stop()

    start_date, end_date = periodo_selecionado
    st.info(f"Exibindo dados de **{start_date.strftime('%d/%m/%Y')}** a **{end_date.strftime('%d/%m/%Y')}**")
    st.divider()

    # --- Tabela de Valida칞칚o ---
    st.header("Chats Recebidos no Per칤odo")
    
    df_chats = get_octadesk_chats(api_token, start_date, end_date)

    if df_chats is not None and not df_chats.empty:
        st.success(f"Sucesso! {len(df_chats)} chats encontrados.")
        
        # Seleciona e renomeia colunas para uma exibi칞칚o inicial mais limpa
        colunas_para_exibir = {
            'number': 'N칰mero',
            'status': 'Status',
            'createdAt': 'Data de Cria칞칚o',
            'requester.name': 'Cliente',
            'assignee.name': 'Agente Respons치vel',
            'group.name': 'Grupo de Atendimento'
        }
        
        colunas_existentes = [col for col in colunas_para_exibir.keys() if col in df_chats.columns]
        df_display = df_chats[colunas_existentes].rename(columns=colunas_para_exibir)

        st.dataframe(
            df_display,
            use_container_width=True,
            hide_index=True,
            column_config={
                "Data de Cria칞칚o": st.column_config.DatetimeColumn(format="D/MM/YYYY HH:mm")
            }
        )
    else:
        st.info("Nenhum chat encontrado para o per칤odo selecionado ou ocorreu um erro na busca.")